<<<<<<< HEAD
yelp_response <- GET(paste0(yelp_base_uri, yelp_resource), query = yelp_query_params,
add_headers('Authorization' = paste0("Bearer ", yelp_api_key)))
yelp_body <- content(yelp_response, "text")
yelp_parsed_data <- fromJSON(yelp_body)
seattle_events <- parsed_data$events
seattle_events <- yelp_parsed_data$events
seattle_events <- flatten(seattle_events)
seattle_events <- as.data.frame(seattle_events) %>%
select(category, name, description, location.address1, time_start, time_end, cost, is_canceled, event_site_url)
colnames(seattle_events) <- c("Category", "Event Name", "Description", "Address", "Start Time", "End Time", "Cost",
"Has the event been canceled?", "Event Site URL")
View(seattle_events)
source("./yelp_api_key.R")
source("./api_keys.R")
sygic_api_key <- "GBoJ4X2Hxv7m0DOfabf9LaFe40PXPlhE9VzzGIVa"
sygic_base_uri <- "https://api.sygictravelapi.com/1.0/en/"
sygic_resource <- "places/list"
sygic_query_params <- list(categories = "sightseeing")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
sygic_body <- content(sygic_response, "text")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
print(sygic_response)
sygic_body <- content(sygic_response, "text")
sygic_parsed_data <- fromJSON(sygic_body)
print(sygic_parsed_data)
sightseeing <- sygic_parsed_data$data
print(sightseeing)
sightseeing <- sygic_parsed_data$data$places
print(sightseeing)
sightseeing <- flatten(sightseeing) %>% as.data.frame()
View(sightseeing)
sygic_query_params <- list(categories = "sightseeing", level = "city")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
sygic_body <- content(sygic_response, "text")
sygic_parsed_data <- fromJSON(sygic_body)
sightseeing <- sygic_parsed_data$data$places
sightseeing <- flatten(sightseeing) %>% as.data.frame()
View(sightseeing)
sygic_query_params <- list(categories = "sightseeing", level = "city", lang = "en")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
sygic_body <- content(sygic_response, "text")
sygic_parsed_data <- fromJSON(sygic_body)
sightseeing <- sygic_parsed_data$data$places
sightseeing <- flatten(sightseeing) %>% as.data.frame()
View(sightseeing)
source("./seattle population estimates")
setwd("~/weather_analyzer")
source("./seattle population estimates")
source("./seattle_population_estimates.R")
source("./seattle_population_estimates.csv")
source("./seattle_population_estimates.csv")
source("/seattle_population_estimates.csv")
source("seattle_population_estimates.csv")
source("seattle_population_estimates.csv")
population <- read.csv("./seattle_population_estimates.R", stringsAsFactors = FALSE)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
View(population)
population <- filter(population, NAME == "Seattle city")
View(population)
population <- filter(population, NAME == "Seattle city") %>% filter([1,])
population <- filter(population, NAME == "Seattle city") %>% filter([,1])
population <- filter(population, NAME == "Seattle city") %>% [1,]
population <- filter(population, NAME == "Seattle city")
population <- population[1,]
View(population)
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
View(population)
colnames(population) <- c("City", "Population 2010", "Population 2011", "Population 2012", "Population 2013",
"Population 2014", "Population 2015", "Population 2016")
View(population)
temperature <- read.csv("./seattleWeather_1948-2017.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2)
View(temperature)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
View(temperature)
temperature <- read.csv("./seattleWeather_1948-2017.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp) %>%
filter(row_number() >= )
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
View(temperature)
temperature <- mean(temperature[1:365, 2])
View(temperature)
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
temperature_averages <- c(mean(temperature[1:365, 2]), mean(temperature[366:730, 2]), mean(temperature[731:1096, 2]),
mean(temperature[1097:1461, 2]), mean(temperature[1462:1826, 2]), mean(temperature[1827:2191, 2]),
mean(temperature[2192:2557, 2]))
View(temperature_averages)
year <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016)
temperature <- data.frame(year, temperature_averages)
View(temperature)
library(ggplot2)
View(population)
library(tidyr)
population <- gather(population, key = year, value = city)
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = city)
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = city)
View(population)
population <- gather(population, key = year, value = population)
View(population)
population <- gather(population, key = year, value = city)
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- gather(population, key = year, value = population)
View(population)
population <- gather(population, key = year, value = population) %>% filter(-1)
population <- population[-1,]
View(population)
ggplot() +
geom_line(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_line(population, mapping = aes(x = year, y = population))
ggplot() +
geom_line(data = temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_line(data = population, mapping = aes(x = year, y = population))
View(temperature)
ggplot() +
geom_smooth(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_smooth(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population))
ggplot() +
geom_bar(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_bar(population, mapping = aes(x = year, y = population))
library(ggplot2)
ggplot() +
geom_bar(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages, color = "red"))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
(population)
View(temperature)
population <- population[2:8,]
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = population)
population <- population[2:8,]
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = population)
View(population)
population <- filter(population, year != "City")
View(population)
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
View(temperature)
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
temperature_averages <- c((mean(temperature[1:365, 2])), (mean(temperature[366:730, 2])), (mean(temperature[731:1096, 2])),
(mean(temperature[1097:1461, 2])), (mean(temperature[1462:1826, 2])), (mean(temperature[1827:2191, 2])),
(mean(temperature[2192:2557, 2])))
year <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016)
temperature <- data.frame(year, temperature_averages)
View(temperature)
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
runApp()
runApp()
print(api_date_range)
source("seattle_rain_analysis.R")
source("seattle_rain_analysis.R")
source("arjun_analysis.R")
print(api_date_range)
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
source("ayah_data.R")
source("ayah_data.R")
source("ayah_data.R")
sea_day_predict <- 30
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
statement <- "LITTLE chance of rain today!"
will_it_rain <- will_it_rain[1,]
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
statement <- "CHANCE of Rain!"
will_it_rain <- will_it_rain[2,]
} else {
statement <- "GOOD CHANCE of seeing some rain today!"
will_it_rain <- will_it_rain[3,]
}
}
suggestions(sea_day_predict)
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
return(statement <- "LITTLE chance of rain today!")
return(will_it_rain <- will_it_rain[1,])
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
return(statement <- "CHANCE of Rain!")
return(will_it_rain <- will_it_rain[2,])
} else {
return(statement <- "GOOD CHANCE of seeing some rain today!")
return(will_it_rain <- will_it_rain[3,])
}
}
suggestions(sea_day_predict)
sea_day_predict <- 20
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
print(statement <- "LITTLE chance of rain today!")
return(will_it_rain <- will_it_rain[1,])
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
return(statement <- "CHANCE of Rain!")
return(will_it_rain <- will_it_rain[2,])
} else {
return(statement <- "GOOD CHANCE of seeing some rain today!")
return(will_it_rain <- will_it_rain[3,])
}
}
suggestions(sea_day_predict)
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
print(statement <- "LITTLE chance of rain today!")
print(will_it_rain <- will_it_rain[1,])
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
print(statement <- "CHANCE of Rain!")
print(will_it_rain <- will_it_rain[2,])
} else {
print(statement <- "GOOD CHANCE of seeing some rain today!")
print(will_it_rain <- will_it_rain[3,])
}
}
suggestions(sea_day_predict)
View(suggestions(sea_day_predict))
source("ayah_data.R")
runApp()
runApp()
install.packages("shinyjs")
runApp()
runApp()
source("server.R")
source("server.R")
setwd("~/weather_analyzer")
source("server.R")
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_histogram(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
View(population)
population <- filter(population, NAME == "Seattle city")
View(population)
population <- filter(population, NAME == "Seattle city" | COUNTY == 33)
View(population)
population <- filter(population, NAME == "Seattle city" & COUNTY == 33)
View(population)
population <- population %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
View(population)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city" & COUNTY == 33)
population <- population %>% select(POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
View(population)
colnames(population) <- c("2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- gather(population, key = year, value = population)
View(population)
population <- filter(population, year != "City")
View(population)
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(data = temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(data = population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(data = temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(data = population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(data = temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(data = temperature, mapping = aes(x = year, y = population, color = year))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
temperature_averages <- c((mean(temperature[1:365, 2])), (mean(temperature[366:730, 2])), (mean(temperature[731:1096, 2])),
(mean(temperature[1097:1461, 2])), (mean(temperature[1462:1826, 2])), (mean(temperature[1827:2191, 2])),
(mean(temperature[2192:2557, 2])))
year <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016)
temperature <- data.frame(year, temperature_averages)
View(temperature)
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
temp <- ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
population <- ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
forecast_day <- c(1:7)
source("ayah_data.R")
runApp()
runApp('~/Downloads/Arjun branch 2')
runApp('~/Downloads/Arjun branch 2')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
install.packages("plotly")
install.packages("plotly")
shiny::runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('~/Downloads/Arjun branch')
runApp()
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
p
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) + geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
p <- ggplot(data = reactive_values_3()[["country_mean_data"]],
aes(x = reactive_values_3()[["country_mean_data"]]$Years,
y = reactive_values_3()[["country_mean_data"]]$meanByYear)) +
labs(title = "Scatter Plot showing Average temperatures of selected country from 1900-2012", x = "Year", y = "Average Temperature") +
geom_point() +
geom_smooth(method = "lm", col = "red")
ggplotly(p)
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
=======
party_df <- flatten(party_output$results$votes) %>%
select(bill.bill_id, democratic.majority_position, republican.majority_position, roll_call)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id", "roll_call"))
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
vote_uri <- paste0(base_uri, "members/", representative_id, "/votes.json")
vote_response <- GET(vote_uri, add_headers('X-API-Key' = propub_key))
vote_body <- content(vote_response, "text")
vote_output <- fromJSON(vote_body)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call) %>%
mutate(roll_call = str(roll_call))
vote_uri <- paste0(base_uri, "members/", representative_id, "/votes.json")
vote_response <- GET(vote_uri, add_headers('X-API-Key' = propub_key))
vote_body <- content(vote_response, "text")
vote_output <- fromJSON(vote_body)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call) %>%
mutate(roll_call_str = str(roll_call))
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
mutate(roll_call_str = str(roll_call)) %>%
select(bill.bill_id, position, roll_call_str)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
mutate("roll_call_str" = str(roll_call)) %>%
select(bill.bill_id, position, roll_call_str)
str(vote_df$roll_call)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
mutate(roll_call_str = str(roll_call)) %>%
select(bill.bill_id, position, roll_call_str)
setwd("C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/a5-data-report-hemilg")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(dplyr)
library(jsonlite)
library(knitr)
library(kableExtra)
source("apiKeys.r")
topic <- "NASA"
base_uri <- "https://api.propublica.org/congress/v1/"
congress_num <- 115
representative_id <- "D000617" # WA representative Suzan DelBene of district 1.
View(party_df)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
rowwise() %>%
mutate(roll_call_str = str(roll_call)) %>%
select(bill.bill_id, position, roll_call)
str(vote_df$roll_call)
as.character(vote_df$roll_call)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
rowwise() %>%
mutate(roll_call_str = as.character(roll_call)) %>%
select(bill.bill_id, position, roll_call)
party_df <- flatten(party_output$results$votes) %>%
select(bill.bill_id, democratic.majority_position, republican.majority_position, roll_call) %>%   rowwise() %>%
mutate(roll_call_str = as.character(roll_call))
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
party_df <- flatten(party_output$results$votes) %>%
select(bill.bill_id, democratic.majority_position, republican.majority_position, roll_call)
party_df$roll_call <- as.character(party_df$roll_call)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call)
vote_df$roll_call <- as.character(vote_df$roll_call)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
View(compare_df)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym(colnames(party_df)[3])
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym(colnames(party_df)[3])
col2 <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym(colnames(party_df)[3])
party_df <- party_df %>%
mutate(voted_with_other_party = (party_df$position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (party_df$position == !!interested_col))
} else {
col1 <- rlang::sym(colnames(party_df)[3])
col2 <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (party_df$position == !!col1 | position == !!col2))
}
colnames(party_df)[3]
a <- party_df$position == party_df$republican.majority_position
a
party_df$position
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym("democratic.majority_position")
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym("republican.majority_position")
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym("democratic.majority_position")
col2 <- rlang::sym("republican.majority_position")
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym("democratic.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym("democratic.majority_position")
col2 <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
count <- sum(compare_df$voted_with_other_party)
print(count/total)
count
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym("democratic.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym("democratic.majority_position")
col2 <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
count <- sum(compare_df$voted_with_other_party)
print(count/total)
count
percentage <- 100 * count/total
percentage
source("setup.R")
source("setup.R")
source("setup.R")
topic <- "NASA"
# Used for the table in Section 1
base_uri <- "https://api.propublica.org/congress/v1/"
# Base Uri for the ProPublica API
congress_num <- 115
# Current Congress Number can be found at https://www.congress.gov/
representative_id <- "D000617"
# WA representative Suzan DelBene of district 1.
# ID can be found in URL of the ProPublica page about Susan DelBene at
# https://projects.propublica.org/represent/members/D000617-suzan-k-delbene
source("section1.R")
source("section1.R")
output <- get_output_from_uri(resource_uri)
source("setup.R")
topic <- "NASA"
# Used for the table in Section 1
base_uri <- "https://api.propublica.org/congress/v1/"
# Base Uri for the ProPublica API
congress_num <- 115
# Current Congress Number can be found at https://www.congress.gov/
representative_id <- "D000617"
# WA representative Suzan DelBene of district 1.
# ID can be found in URL of the ProPublica page about Susan DelBene at
# https://projects.propublica.org/represent/members/D000617-suzan-k-delbene
source("section1.R")
source("section1.R")
source("section1.R")
kable(table, "html") %>%
kable_styling(bootstrap_options = c("striped", "responsive"))
source("section1.R")
kable(section_1_table, "html") %>%
kable_styling(bootstrap_options = c("striped", "responsive"))
View(df1)
df1 <- flatten(output$results$members[[1]]) %>%
filter(id == representative_id)
congress <- paste0(congress_num, "/")
chamber <- "house"
resource_path <- paste0(congress, chamber, "/members.json")
resource_uri <- paste0(base_uri, resource_path)
output1 <- get_output_from_uri(resource_uri)
df1 <- flatten(output1$results$members[[1]]) %>%
filter(id == representative_id)
df1
df1$party
library(ggplot2)
library(dplyr)
nrow(diamonds)
ncol(diamonds)
names(diamonds)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 2000)
nrow(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
View(diamonds_sa)
View(diamonds_sample)
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, fill = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color=cut))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price, fill = cut))
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = depth, fill = cut))
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = depth))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = clarity))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price, fill = clarity))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color=grey) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="grey") +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="purple") +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="purple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="black", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="white", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="black", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price))
head(clarity_summary)
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity, y = mean))
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity, y = mean)) +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity, y = mean)) +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity)) +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity))# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(clarity)) +
geom_bar()# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(clarity)) +
geom_bar(aes(mean))# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity)) +
geom_bar(aes(y = mean))# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar()# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity")# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity") +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
head(clarity_summary)
sd(diamonds_sample$price)
mean(diamonds_sample$price)
sd(diamonds_sample$price, na.rm = FALSE)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price, na.rm = FALSE), n = n(price)) %>%
mutate(se = sd/n)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price, na.rm = FALSE), n = n()) %>%
mutate(se = sd/n)
head(clarity_summary)
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity") +
geom_errorbar(aes(x = clarity, ymin=mean-se, ymax=mean+se))
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price, na.rm = FALSE), n = n()) %>%
mutate(se = sd/sqrt(n))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity") +
geom_errorbar(aes(x = clarity, ymin=mean-se, ymax=mean+se))
install.packages("shiny")
library(shiny)
# define a UI for the app
my_ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user_name', label="What is your name?")
)
shinyApp(ui, server)
library(shiny)
# define a UI for the app
ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user_name', label="What is your name?")
)
# both input and output are lists
server <- function(input, output){
}
shinyApp(ui, server)
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
library(shiny)
# define a UI for the app
# Arguments (content elements) can be of 4 generic types:
# - UI layouts        (allowing for nesting)
# - Styled Content    (like the h1 tag, functions named after HTML)
# - Control Widgets   (like the text input)
# - Reactive Outputs  (like interactive graphs)
ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
p("It is", strong("SUPER"), "nice to meet you!"),
# control widgets
textInput('user_name', label="What is your nombre?"),
sliderInput('slide_key', label = "Pick a number homie", min = 0, max = 50, value = round(0.5*(min+max)))
)
# both input and output are lists
server <- function(input, output){
}
shinyApp(ui, server)
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='hemilg', token='D8362439C6F53F257ABAD1A0B8943DD6', secret='QXRfnWvSGfcnO6TOOzwCUbetyg1+akJ7j5sXQI8X')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
shiny::runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/weather_analyzer')
setwd("C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/weather_analyzer")
runApp()
source("arjun_analysis.R")
runApp()
library(tidyverse)
library(shiny)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(ggplot2)
library(stringr)
library(shinyjs)
runApp()
shiny::runApp()
>>>>>>> 347d237983af2767420acacec518ace50af3b0d3
