yelp_response <- GET(paste0(yelp_base_uri, yelp_resource), query = yelp_query_params,
add_headers('Authorization' = paste0("Bearer ", yelp_api_key)))
yelp_body <- content(yelp_response, "text")
yelp_parsed_data <- fromJSON(yelp_body)
seattle_events <- parsed_data$events
seattle_events <- yelp_parsed_data$events
seattle_events <- flatten(seattle_events)
seattle_events <- as.data.frame(seattle_events) %>%
select(category, name, description, location.address1, time_start, time_end, cost, is_canceled, event_site_url)
colnames(seattle_events) <- c("Category", "Event Name", "Description", "Address", "Start Time", "End Time", "Cost",
"Has the event been canceled?", "Event Site URL")
View(seattle_events)
source("./yelp_api_key.R")
source("./api_keys.R")
sygic_api_key <- "GBoJ4X2Hxv7m0DOfabf9LaFe40PXPlhE9VzzGIVa"
sygic_base_uri <- "https://api.sygictravelapi.com/1.0/en/"
sygic_resource <- "places/list"
sygic_query_params <- list(categories = "sightseeing")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
sygic_body <- content(sygic_response, "text")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
print(sygic_response)
sygic_body <- content(sygic_response, "text")
sygic_parsed_data <- fromJSON(sygic_body)
print(sygic_parsed_data)
sightseeing <- sygic_parsed_data$data
print(sightseeing)
sightseeing <- sygic_parsed_data$data$places
print(sightseeing)
sightseeing <- flatten(sightseeing) %>% as.data.frame()
View(sightseeing)
sygic_query_params <- list(categories = "sightseeing", level = "city")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
sygic_body <- content(sygic_response, "text")
sygic_parsed_data <- fromJSON(sygic_body)
sightseeing <- sygic_parsed_data$data$places
sightseeing <- flatten(sightseeing) %>% as.data.frame()
View(sightseeing)
sygic_query_params <- list(categories = "sightseeing", level = "city", lang = "en")
sygic_response <- GET(paste0(sygic_base_uri, sygic_resource), query = sygic_query_params,
add_headers("x-api-key" = sygic_api_key))
sygic_body <- content(sygic_response, "text")
sygic_parsed_data <- fromJSON(sygic_body)
sightseeing <- sygic_parsed_data$data$places
sightseeing <- flatten(sightseeing) %>% as.data.frame()
View(sightseeing)
source("./seattle population estimates")
setwd("~/weather_analyzer")
source("./seattle population estimates")
source("./seattle_population_estimates.R")
source("./seattle_population_estimates.csv")
source("./seattle_population_estimates.csv")
source("/seattle_population_estimates.csv")
source("seattle_population_estimates.csv")
source("seattle_population_estimates.csv")
population <- read.csv("./seattle_population_estimates.R", stringsAsFactors = FALSE)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
View(population)
population <- filter(population, NAME == "Seattle city")
View(population)
population <- filter(population, NAME == "Seattle city") %>% filter([1,])
population <- filter(population, NAME == "Seattle city") %>% filter([,1])
population <- filter(population, NAME == "Seattle city") %>% [1,]
population <- filter(population, NAME == "Seattle city")
population <- population[1,]
View(population)
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
View(population)
colnames(population) <- c("City", "Population 2010", "Population 2011", "Population 2012", "Population 2013",
"Population 2014", "Population 2015", "Population 2016")
View(population)
temperature <- read.csv("./seattleWeather_1948-2017.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2)
View(temperature)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
View(temperature)
temperature <- read.csv("./seattleWeather_1948-2017.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp) %>%
filter(row_number() >= )
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
View(temperature)
temperature <- mean(temperature[1:365, 2])
View(temperature)
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
temperature_averages <- c(mean(temperature[1:365, 2]), mean(temperature[366:730, 2]), mean(temperature[731:1096, 2]),
mean(temperature[1097:1461, 2]), mean(temperature[1462:1826, 2]), mean(temperature[1827:2191, 2]),
mean(temperature[2192:2557, 2]))
View(temperature_averages)
year <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016)
temperature <- data.frame(year, temperature_averages)
View(temperature)
library(ggplot2)
View(population)
library(tidyr)
population <- gather(population, key = year, value = city)
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = city)
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = city)
View(population)
population <- gather(population, key = year, value = population)
View(population)
population <- gather(population, key = year, value = city)
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- gather(population, key = year, value = population)
View(population)
population <- gather(population, key = year, value = population) %>% filter(-1)
population <- population[-1,]
View(population)
ggplot() +
geom_line(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_line(population, mapping = aes(x = year, y = population))
ggplot() +
geom_line(data = temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_line(data = population, mapping = aes(x = year, y = population))
View(temperature)
ggplot() +
geom_smooth(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_smooth(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population))
ggplot() +
geom_bar(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_bar(population, mapping = aes(x = year, y = population))
library(ggplot2)
ggplot() +
geom_bar(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages)) +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_bar(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages, color = "red"))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
(population)
View(temperature)
population <- population[2:8,]
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = population)
population <- population[2:8,]
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city")
population <- population[1,] %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
population <- gather(population, key = year, value = population)
View(population)
population <- filter(population, year != "City")
View(population)
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
View(temperature)
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
temperature_averages <- c((mean(temperature[1:365, 2])), (mean(temperature[366:730, 2])), (mean(temperature[731:1096, 2])),
(mean(temperature[1097:1461, 2])), (mean(temperature[1462:1826, 2])), (mean(temperature[1827:2191, 2])),
(mean(temperature[2192:2557, 2])))
year <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016)
temperature <- data.frame(year, temperature_averages)
View(temperature)
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
runApp()
runApp()
print(api_date_range)
source("seattle_rain_analysis.R")
source("seattle_rain_analysis.R")
source("arjun_analysis.R")
print(api_date_range)
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
source("ayah_data.R")
source("ayah_data.R")
source("ayah_data.R")
sea_day_predict <- 30
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
statement <- "LITTLE chance of rain today!"
will_it_rain <- will_it_rain[1,]
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
statement <- "CHANCE of Rain!"
will_it_rain <- will_it_rain[2,]
} else {
statement <- "GOOD CHANCE of seeing some rain today!"
will_it_rain <- will_it_rain[3,]
}
}
suggestions(sea_day_predict)
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
return(statement <- "LITTLE chance of rain today!")
return(will_it_rain <- will_it_rain[1,])
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
return(statement <- "CHANCE of Rain!")
return(will_it_rain <- will_it_rain[2,])
} else {
return(statement <- "GOOD CHANCE of seeing some rain today!")
return(will_it_rain <- will_it_rain[3,])
}
}
suggestions(sea_day_predict)
sea_day_predict <- 20
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
print(statement <- "LITTLE chance of rain today!")
return(will_it_rain <- will_it_rain[1,])
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
return(statement <- "CHANCE of Rain!")
return(will_it_rain <- will_it_rain[2,])
} else {
return(statement <- "GOOD CHANCE of seeing some rain today!")
return(will_it_rain <- will_it_rain[3,])
}
}
suggestions(sea_day_predict)
suggestions <- function(sea_day_predict) {
if (sea_day_predict < 30){
print(statement <- "LITTLE chance of rain today!")
print(will_it_rain <- will_it_rain[1,])
} else if (sea_day_predict >= 30 & sea_day_predict < 60){
print(statement <- "CHANCE of Rain!")
print(will_it_rain <- will_it_rain[2,])
} else {
print(statement <- "GOOD CHANCE of seeing some rain today!")
print(will_it_rain <- will_it_rain[3,])
}
}
suggestions(sea_day_predict)
View(suggestions(sea_day_predict))
source("ayah_data.R")
runApp()
runApp()
install.packages("shinyjs")
runApp()
runApp()
source("server.R")
source("server.R")
setwd("~/weather_analyzer")
source("server.R")
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_histogram(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
View(population)
population <- filter(population, NAME == "Seattle city")
View(population)
population <- filter(population, NAME == "Seattle city" | COUNTY == 33)
View(population)
population <- filter(population, NAME == "Seattle city" & COUNTY == 33)
View(population)
population <- population %>% select(NAME, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
View(population)
colnames(population) <- c("City", "2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- read.csv("./seattle_population_estimates.csv", stringsAsFactors = FALSE)
population <- filter(population, NAME == "Seattle city" & COUNTY == 33)
population <- population %>% select(POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012, POPESTIMATE2013,
POPESTIMATE2014, POPESTIMATE2015, POPESTIMATE2016)
View(population)
colnames(population) <- c("2010", "2011", "2012", "2013",
"2014", "2015", "2016")
View(population)
population <- gather(population, key = year, value = population)
View(population)
population <- filter(population, year != "City")
View(population)
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(data = temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(data = population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(data = temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(data = population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(data = temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(data = temperature, mapping = aes(x = year, y = population, color = year))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
temperature <- read.csv("./seattleWeather_2010-2016.csv", stringsAsFactors = FALSE)
temperature <- mutate(temperature, average_temp = (TMAX+TMIN)/2) %>% select(DATE, average_temp)
temperature_averages <- c((mean(temperature[1:365, 2])), (mean(temperature[366:730, 2])), (mean(temperature[731:1096, 2])),
(mean(temperature[1097:1461, 2])), (mean(temperature[1462:1826, 2])), (mean(temperature[1827:2191, 2])),
(mean(temperature[2192:2557, 2])))
year <- c(2010, 2011, 2012, 2013, 2014, 2015, 2016)
temperature <- data.frame(year, temperature_averages)
View(temperature)
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages)) +
geom_point(population, mapping = aes(x = year, y = population, color = population))
ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
temp <- ggplot() +
geom_point(temperature, mapping = aes(x = year, y = temperature_averages, color = temperature_averages))
population <- ggplot() +
geom_point(population, mapping = aes(x = year, y = population, color = population))
forecast_day <- c(1:7)
source("ayah_data.R")
runApp()
runApp('~/Downloads/Arjun branch 2')
runApp('~/Downloads/Arjun branch 2')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
install.packages("plotly")
install.packages("plotly")
shiny::runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('~/Downloads/Arjun branch')
runApp()
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
p
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) + geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
p <- ggplot(data = reactive_values_3()[["country_mean_data"]],
aes(x = reactive_values_3()[["country_mean_data"]]$Years,
y = reactive_values_3()[["country_mean_data"]]$meanByYear)) +
labs(title = "Scatter Plot showing Average temperatures of selected country from 1900-2012", x = "Year", y = "Average Temperature") +
geom_point() +
geom_smooth(method = "lm", col = "red")
ggplotly(p)
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
output$land_plotout <- renderPlot({
TemperatureForGivenYear <- reactive_values()[['the_table']]
View(TemperatureForGivenYear)
print("sd")
p <-
ggplot(
data = TemperatureForGivenYear) +
geom_line(aes(x = TemperatureForGivenYear$dt,
y = TemperatureForGivenYear$AverageTemperature, group = input$givenCountry, color = input$givenCountry)
) +
#geom_line(aes(x = TemperatureForGivenYear$dt,
#y = TemperatureForGivenYear$LandAverageTemperature, group = "Boolean", color = "Global")) +
scale_color_manual("",
breaks = c(input$givenCountry, "Global"),
values = c("red", "green")) +
labs(title = "Country temperature vs Global temperature", x = "Year in [year/month/day] format",
y = "Average Temperature in Celcius") + theme_gray()
p
})
runApp('~/Downloads/Arjun branch')
runApp('~/Downloads/Arjun branch')
