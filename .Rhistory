View(vote_df)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id", "roll_call"))
vote_uri <- paste0(base_uri, "members/", representative_id, "/votes.json")
vote_response <- GET(vote_uri, add_headers('X-API-Key' = propub_key))
vote_body <- content(vote_response, "text")
vote_output <- fromJSON(vote_body)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call)
party_uri <- paste0(base_uri, chamber, "/votes/recent.json")
party_response <- GET(party_uri, add_headers('X-API-Key' = propub_key))
party_body <- content(party_response, "text")
party_output <- fromJSON(party_body)
party_df <- flatten(party_output$results$votes) %>%
select(bill.bill_id, democratic.majority_position, republican.majority_position, roll_call)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id", "roll_call"))
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
vote_uri <- paste0(base_uri, "members/", representative_id, "/votes.json")
vote_response <- GET(vote_uri, add_headers('X-API-Key' = propub_key))
vote_body <- content(vote_response, "text")
vote_output <- fromJSON(vote_body)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call) %>%
mutate(roll_call = str(roll_call))
vote_uri <- paste0(base_uri, "members/", representative_id, "/votes.json")
vote_response <- GET(vote_uri, add_headers('X-API-Key' = propub_key))
vote_body <- content(vote_response, "text")
vote_output <- fromJSON(vote_body)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call) %>%
mutate(roll_call_str = str(roll_call))
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
mutate(roll_call_str = str(roll_call)) %>%
select(bill.bill_id, position, roll_call_str)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
mutate("roll_call_str" = str(roll_call)) %>%
select(bill.bill_id, position, roll_call_str)
str(vote_df$roll_call)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
mutate(roll_call_str = str(roll_call)) %>%
select(bill.bill_id, position, roll_call_str)
setwd("C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/a5-data-report-hemilg")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(dplyr)
library(jsonlite)
library(knitr)
library(kableExtra)
source("apiKeys.r")
topic <- "NASA"
base_uri <- "https://api.propublica.org/congress/v1/"
congress_num <- 115
representative_id <- "D000617" # WA representative Suzan DelBene of district 1.
View(party_df)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
rowwise() %>%
mutate(roll_call_str = str(roll_call)) %>%
select(bill.bill_id, position, roll_call)
str(vote_df$roll_call)
as.character(vote_df$roll_call)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
rowwise() %>%
mutate(roll_call_str = as.character(roll_call)) %>%
select(bill.bill_id, position, roll_call)
party_df <- flatten(party_output$results$votes) %>%
select(bill.bill_id, democratic.majority_position, republican.majority_position, roll_call) %>%   rowwise() %>%
mutate(roll_call_str = as.character(roll_call))
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
party_df <- flatten(party_output$results$votes) %>%
select(bill.bill_id, democratic.majority_position, republican.majority_position, roll_call)
party_df$roll_call <- as.character(party_df$roll_call)
vote_df <- flatten(data.frame(vote_output$results$votes)) %>%
select(bill.bill_id, position, roll_call)
vote_df$roll_call <- as.character(vote_df$roll_call)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
View(compare_df)
compare_df <- left_join(vote_df, party_df, by = c("bill.bill_id" = "bill.bill_id", "roll_call" = "roll_call"))
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym(colnames(party_df)[3])
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym(colnames(party_df)[3])
col2 <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym(colnames(party_df)[3])
party_df <- party_df %>%
mutate(voted_with_other_party = (party_df$position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (party_df$position == !!interested_col))
} else {
col1 <- rlang::sym(colnames(party_df)[3])
col2 <- rlang::sym(colnames(party_df)[2])
party_df <- party_df %>%
mutate(voted_with_other_party = (party_df$position == !!col1 | position == !!col2))
}
colnames(party_df)[3]
a <- party_df$position == party_df$republican.majority_position
a
party_df$position
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym("democratic.majority_position")
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym("republican.majority_position")
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym("democratic.majority_position")
col2 <- rlang::sym("republican.majority_position")
party_df <- party_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym("democratic.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym("democratic.majority_position")
col2 <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
count <- sum(compare_df$voted_with_other_party)
print(count/total)
count
total <- nrow(vote_df)
count <- 0
if(party_letter == "D"){
interested_col <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else if(party_letter == "R"){
interested_col <- rlang::sym("democratic.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!interested_col))
} else {
col1 <- rlang::sym("democratic.majority_position")
col2 <- rlang::sym("republican.majority_position")
compare_df <- compare_df %>%
mutate(voted_with_other_party = (position == !!col1 | position == !!col2))
}
count <- sum(compare_df$voted_with_other_party)
print(count/total)
count
percentage <- 100 * count/total
percentage
source("setup.R")
source("setup.R")
source("setup.R")
topic <- "NASA"
# Used for the table in Section 1
base_uri <- "https://api.propublica.org/congress/v1/"
# Base Uri for the ProPublica API
congress_num <- 115
# Current Congress Number can be found at https://www.congress.gov/
representative_id <- "D000617"
# WA representative Suzan DelBene of district 1.
# ID can be found in URL of the ProPublica page about Susan DelBene at
# https://projects.propublica.org/represent/members/D000617-suzan-k-delbene
source("section1.R")
source("section1.R")
output <- get_output_from_uri(resource_uri)
source("setup.R")
topic <- "NASA"
# Used for the table in Section 1
base_uri <- "https://api.propublica.org/congress/v1/"
# Base Uri for the ProPublica API
congress_num <- 115
# Current Congress Number can be found at https://www.congress.gov/
representative_id <- "D000617"
# WA representative Suzan DelBene of district 1.
# ID can be found in URL of the ProPublica page about Susan DelBene at
# https://projects.propublica.org/represent/members/D000617-suzan-k-delbene
source("section1.R")
source("section1.R")
source("section1.R")
kable(table, "html") %>%
kable_styling(bootstrap_options = c("striped", "responsive"))
source("section1.R")
kable(section_1_table, "html") %>%
kable_styling(bootstrap_options = c("striped", "responsive"))
View(df1)
df1 <- flatten(output$results$members[[1]]) %>%
filter(id == representative_id)
congress <- paste0(congress_num, "/")
chamber <- "house"
resource_path <- paste0(congress, chamber, "/members.json")
resource_uri <- paste0(base_uri, resource_path)
output1 <- get_output_from_uri(resource_uri)
df1 <- flatten(output1$results$members[[1]]) %>%
filter(id == representative_id)
df1
df1$party
library(ggplot2)
library(dplyr)
nrow(diamonds)
ncol(diamonds)
names(diamonds)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 2000)
nrow(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
View(diamonds_sa)
View(diamonds_sample)
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, fill = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color=cut))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price, fill = cut))
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = depth, fill = cut))
# (For a more traditional "bell-curve", make a histogram of diamond `depth`)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = depth))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = clarity))
# Draw a histogram (using histogram geometry) of diamond prices.
# Try mapping each bar based on clarity as well!
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price, fill = clarity))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color=grey) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="grey") +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="purple") +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="purple", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="black", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="white", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color="black", alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color=cut))
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price))
head(clarity_summary)
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity, y = mean))
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity, y = mean)) +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity, y = mean)) +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity)) +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(data = clarity_summary) +
geom_bar(mapping = aes(x = clarity))# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(clarity)) +
geom_bar()# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(clarity)) +
geom_bar(aes(mean))# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity)) +
geom_bar(aes(y = mean))# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar()# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity")# +
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity") +
geom_errorbar(aes(x = clarity, ymin=mean-sd, ymax=mean+sd))
head(clarity_summary)
sd(diamonds_sample$price)
mean(diamonds_sample$price)
sd(diamonds_sample$price, na.rm = FALSE)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price, na.rm = FALSE), n = n(price)) %>%
mutate(se = sd/n)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price, na.rm = FALSE), n = n()) %>%
mutate(se = sd/n)
head(clarity_summary)
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity") +
geom_errorbar(aes(x = clarity, ymin=mean-se, ymax=mean+se))
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
clarity_summary <- diamonds_sample %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price, na.rm = FALSE), n = n()) %>%
mutate(se = sd/sqrt(n))
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
ggplot(clarity_summary, aes(x = clarity, y = mean)) +
geom_bar(stat="identity") +
geom_errorbar(aes(x = clarity, ymin=mean-se, ymax=mean+se))
install.packages("shiny")
library(shiny)
# define a UI for the app
my_ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user_name', label="What is your name?")
)
shinyApp(ui, server)
library(shiny)
# define a UI for the app
ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput('user_name', label="What is your name?")
)
# both input and output are lists
server <- function(input, output){
}
shinyApp(ui, server)
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
library(shiny)
# define a UI for the app
# Arguments (content elements) can be of 4 generic types:
# - UI layouts        (allowing for nesting)
# - Styled Content    (like the h1 tag, functions named after HTML)
# - Control Widgets   (like the text input)
# - Reactive Outputs  (like interactive graphs)
ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
p("It is", strong("SUPER"), "nice to meet you!"),
# control widgets
textInput('user_name', label="What is your nombre?"),
sliderInput('slide_key', label = "Pick a number homie", min = 0, max = 50, value = round(0.5*(min+max)))
)
# both input and output are lists
server <- function(input, output){
}
shinyApp(ui, server)
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='hemilg', token='D8362439C6F53F257ABAD1A0B8943DD6', secret='QXRfnWvSGfcnO6TOOzwCUbetyg1+akJ7j5sXQI8X')
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/r-lectures/shiny demo')
source("server.R")
setwd("C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/a8-data-app-hemilg")
source("server.R")
runApp('C:/Users/hemil/OneDrive - UW/3 - Freshman Spring/INFO 201/weather_analyzer')
